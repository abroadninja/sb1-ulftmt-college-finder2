generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model College {
  id                    String   @id @default(cuid())
  name                  String
  location             String
  type                 String
  rating               Float
  tuitionPerYear       Float
  image                String
  acceptanceRate       Float
  studentCount         Int
  ranking              Int
  foundedYear          Int
  campusSize           Float
  hasHousing           Boolean
  internationalStudents Int
  researchFunding      Float
  sportsFacilities     String[]
  courses              Course[]
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Course {
  id                    String   @id @default(cuid())
  name                  String
  duration              String
  degree                String
  department            String
  description          String
  careers              String[]
  annualFee            Float
  requirements         String[]
  scholarshipsAvailable Boolean
  internshipPartners   String[]
  collegeId            String
  college              College  @relation(fields: [collegeId], references: [id])
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Student {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  goals     Goal[]
  todos     Todo[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Goal {
  id        String   @id @default(cuid())
  title     String
  category  String
  priority  String
  date      DateTime
  completed Boolean  @default(false)
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Todo {
  id        String   @id @default(cuid())
  title     String
  completed Boolean  @default(false)
  dueDate   DateTime?
  priority  String
  category  String
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  SUPER_ADMIN
}